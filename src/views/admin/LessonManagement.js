import React, { useState, useEffect, useMemo, useCallback } from 'react';
import lessonService from '../../services/lessonService';
import EditLessonModal from '../../components/EditLessonModal';
import QuestionManagement from '../../components/QuestionManagement'; 

export default function LessonManagement() {
  // --- STATE MANAGEMENT ---
  const [lessons, setLessons] = useState([]);
  const [activeTab, setActiveTab] = useState('listening');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('ALL');
  const [levelFilter, setLevelFilter] = useState('ALL');
  const [editModal, setEditModal] = useState({ isOpen: false, lesson: null });
  
  // --- NEW STATE FOR QUESTIONS MANAGEMENT ---
  const [selectedLessonForQuestions, setSelectedLessonForQuestions] = useState(null);
  const [questionsTab, setQuestionsTab] = useState('lessons'); // 'lessons' ho·∫∑c 'questions'

  // --- DATA FETCHING ---
  const loadLessons = useCallback(async (lessonType) => {
    try {
      setLoading(true);
      setError('');
      const response = await lessonService.getLessonsAdmin(lessonType);
      console.log(`‚úÖ ${lessonType} lessons fetched successfully:`, response.data);
      setLessons(response.data || []); // D·ªØ li·ªáu n·∫±m trong response.data
      console.log("Lesson in loadLessons below setLessons:", response.data)
    } catch (error) {
      console.error(`Failed to load ${lessonType} lessons:`, error);
      setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i h·ªçc. Vui l√≤ng th·ª≠ l·∫°i.');
      setLessons([]);
    } finally {
      setLoading(false);
    }
  }, []);

  // T·∫£i d·ªØ li·ªáu khi component ƒë∆∞·ª£c mount ho·∫∑c khi chuy·ªÉn tab
  useEffect(() => {
    if (questionsTab === 'lessons') {
      loadLessons(activeTab);
    }
  }, [activeTab, questionsTab, loadLessons]);

  // --- FILTERING LOGIC ---
  // L·ªçc danh s√°ch b√†i h·ªçc d·ª±a tr√™n c√°c b·ªô l·ªçc
  const filteredLessons = useMemo(() => {
    console.log("Lession in filter logic: " + lessons)
    return lessons.filter(lesson => {
      const matchesSearch = lesson.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                            lesson.description?.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesStatus = statusFilter === 'ALL' || lesson.status === statusFilter;
      const matchesLevel = levelFilter === 'ALL' || lesson.level === levelFilter;
      return matchesSearch && matchesStatus && matchesLevel;
    });
  }, [lessons, searchTerm, statusFilter, levelFilter]);

  // --- EVENT HANDLERS ---
  const handleEdit = (lesson) => {
    setEditModal({
      isOpen: true,
      lesson: lesson
    });
  };

  const handleDelete = async (lessonId, lessonTitle) => {
    const confirmed = window.confirm(
      `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i h·ªçc "${lessonTitle}"?\nH√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.`
    );
    if (!confirmed) return;

    try {
      console.log(lessonId)
      console.log(activeTab)
      await lessonService.deleteLesson(lessonId, activeTab); // Truy·ªÅn `activeTab` ƒë·ªÉ service bi·∫øt endpoint
      setLessons(prevLessons => prevLessons.filter(lesson => lesson.id !== lessonId));
      alert('X√≥a b√†i h·ªçc th√†nh c√¥ng!');
    } catch (error) {
      console.error('Failed to delete lesson:', error);
      alert('Kh√¥ng th·ªÉ x√≥a b√†i h·ªçc. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const handleStatusChange = async (lessonId, currentStatus) => {
    const newStatus = currentStatus === 'DRAFT' ? 'PUBLISHED' : 'DRAFT';
    try {
      await lessonService.updateLessonStatus(lessonId, newStatus, activeTab); // Truy·ªÅn `activeTab`
      setLessons(prevLessons => prevLessons.map(lesson =>
        lesson.id === lessonId ? { ...lesson, status: newStatus } : lesson
      ));
      alert(`Chuy·ªÉn tr·∫°ng th√°i th√†nh c√¥ng!`);
    } catch (error) {
      console.error('Failed to update status:', error);
      alert('Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  const handleEditComplete = useCallback(() => {
    setEditModal({ isOpen: false, lesson: null });
    loadLessons(activeTab); // T·∫£i l·∫°i danh s√°ch cho tab hi·ªán t·∫°i
  }, [activeTab, loadLessons]);

  // --- NEW HANDLERS FOR QUESTIONS MANAGEMENT ---
  const handleQuestionsTabChange = useCallback((tab) => {
    setQuestionsTab(tab);
    if (tab === 'questions') {
      setLoading(false); // Kh√¥ng c·∫ßn loading khi chuy·ªÉn sang tab questions
    }
  }, []);

  const handleLessonSelectForQuestions = useCallback((lessonId) => {
    setSelectedLessonForQuestions(lessonId);
  }, []);

  const handleQuestionsChange = useCallback(() => {
    // Refresh data if needed
    console.log('Questions changed, refreshing data...');
  }, []);
  
  // --- UI HELPER FUNCTIONS ---
  const getTabClassName = useCallback((tabName) => {
    return `px-4 py-2 text-sm font-medium rounded-md focus:outline-none transition-colors duration-200 ${
      activeTab === tabName
        ? 'bg-blue-600 text-white shadow'
        : 'text-gray-600 hover:bg-gray-200'
    }`;
  }, [activeTab]);

  const getQuestionsTabClassName = useCallback((tabName) => {
    return `px-4 py-2 text-sm font-medium rounded-md focus:outline-none transition-colors duration-200 ${
      questionsTab === tabName
        ? 'bg-green-600 text-white shadow'
        : 'text-gray-600 hover:bg-gray-200'
    }`;
  }, [questionsTab]);

  const getStatusBadge = useCallback((status) => {
    return status === 'PUBLISHED' 
      ? 'bg-green-100 text-green-800' 
      : 'bg-yellow-100 text-yellow-800';
  }, []);

  const getLevelBadge = useCallback((level) => {
    const colors = {
      'A2': 'bg-blue-100 text-blue-800', 
      'B1': 'bg-indigo-100 text-indigo-800',
      'B2': 'bg-purple-100 text-purple-800', 
      'C1': 'bg-pink-100 text-pink-800'
    };
    return colors[level] || 'bg-gray-100 text-gray-800';
  }, []);

  // --- RENDER LOGIC ---
  if (loading && questionsTab === 'lessons') {
    return <div className="flex justify-center items-center h-screen text-lg">ƒêang t·∫£i...</div>;
  }

  const pageTitle = activeTab === 'reading' ? 'b√†i ƒë·ªçc' : 'b√†i nghe';

  return (
    <div className="flex flex-wrap mt-4">
      <div className="w-full mb-12 px-4">
        <div className="relative flex flex-col min-w-0 break-words bg-white w-full mb-6 shadow-lg rounded">
          
          {/* Header & Main Tabs */}
          <div className="rounded-t mb-0 px-4 py-3 border-b">
            <h3 className="font-semibold text-lg text-blueGray-700 mb-4">
              Qu·∫£n l√Ω b√†i h·ªçc
            </h3>
            
            {/* Main Navigation Tabs */}
            <div className="flex space-x-2 mb-4">
              <button 
                onClick={() => handleQuestionsTabChange('lessons')} 
                className={getQuestionsTabClassName('lessons')}
              >
                üìö Qu·∫£n l√Ω b√†i h·ªçc
              </button>
              <button 
                onClick={() => handleQuestionsTabChange('questions')} 
                className={getQuestionsTabClassName('questions')}
              >
                ‚ùì Qu·∫£n l√Ω c√¢u h·ªèi
              </button>
            </div>

            {/* Lesson Type Tabs (ch·ªâ hi·ªÉn th·ªã khi ·ªü tab b√†i h·ªçc) */}
            {questionsTab === 'lessons' && (
              <div className="flex space-x-2">
                <button onClick={() => setActiveTab('reading')} className={getTabClassName('reading')}>
                  üìñ Qu·∫£n l√Ω b√†i ƒë·ªçc
                </button>
                <button onClick={() => setActiveTab('listening')} className={getTabClassName('listening')}>
                  üéß Qu·∫£n l√Ω b√†i nghe
                </button>
              </div>
            )}
          </div>

          {/* Content based on selected tab */}
          {questionsTab === 'lessons' ? (
            // --- LESSONS MANAGEMENT CONTENT ---
            <>
              {/* Filters */}
              <div className="px-4 py-3 border-b border-blueGray-200">
                <div className="flex flex-wrap items-center gap-4">
                  <div className="flex-1 min-w-64">
                    <input
                      type="text"
                      placeholder={`T√¨m ki·∫øm ${pageTitle}...`}
                      className="border border-blueGray-300 px-3 py-2 placeholder-blueGray-300 text-blueGray-600 relative bg-white rounded text-sm shadow outline-none focus:outline-none focus:ring w-full"
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                    />
                  </div>
                  <select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)} className="border border-blueGray-300 px-3 py-2 text-blueGray-600 bg-white rounded text-sm shadow outline-none focus:outline-none focus:ring">
                    <option value="ALL">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                    <option value="DRAFT">B·∫£n nh√°p</option>
                    <option value="PUBLISHED">ƒê√£ xu·∫•t b·∫£n</option>
                  </select>
                  <select value={levelFilter} onChange={(e) => setLevelFilter(e.target.value)} className="border border-blueGray-300 px-3 py-2 text-blueGray-600 bg-white rounded text-sm shadow outline-none focus:outline-none focus:ring">
                    <option value="ALL">T·∫•t c·∫£ c·∫•p ƒë·ªô</option>
                    <option value="A2">A2</option>
                    <option value="B1">B1</option>
                    <option value="B2">B2</option>
                    <option value="C1">C1</option>
                  </select>
                </div>
              </div>

              {/* Error Message */}
              {error && <div className="px-4 py-3 bg-red-50 border-l-4 border-red-400 text-red-700">{error}</div>}

              {/* Table */}
              <div className="block w-full overflow-x-auto">
                <table className="items-center w-full bg-transparent border-collapse">
                  <thead>
                    <tr>
                      <th className="px-6 bg-blueGray-50 text-blueGray-500 align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">Ti√™u ƒë·ªÅ</th>
                      <th className="px-6 bg-blueGray-50 text-blueGray-500 align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">C·∫•p ƒë·ªô</th>
                      <th className="px-6 bg-blueGray-50 text-blueGray-500 align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">Tr·∫°ng th√°i</th>
                      <th className="px-6 bg-blueGray-50 text-blueGray-500 align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">Ng√†y t·∫°o</th>
                      <th className="px-6 bg-blueGray-50 text-blueGray-500 align-middle border border-solid border-blueGray-100 py-3 text-xs uppercase border-l-0 border-r-0 whitespace-nowrap font-semibold text-left">Thao t√°c</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredLessons.length === 0 ? (
                      <tr><td colSpan="5" className="text-center py-8 text-blueGray-500">Kh√¥ng c√≥ {pageTitle} n√†o.</td></tr>
                    ) : (
                      filteredLessons.map((lesson) => (
                        <tr key={lesson.id}>
                          <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs p-4 whitespace-normal">
                            <div className="font-semibold text-blueGray-600">{lesson.title}</div>
                            <div className="text-blueGray-500 text-xs">{lesson.description?.substring(0, 100)}...</div>
                          </td>
                          <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4"><span className={`px-2 py-1 rounded-full text-xs font-medium ${getLevelBadge(lesson.level)}`}>{lesson.level}</span></td>
                          <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4"><span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusBadge(lesson.status)}`}>{lesson.status === 'PUBLISHED' ? 'ƒê√£ xu·∫•t b·∫£n' : 'B·∫£n nh√°p'}</span></td>
                          <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">{new Date(lesson.createdAt).toLocaleDateString('vi-VN')}</td>
                          <td className="border-t-0 px-6 align-middle border-l-0 border-r-0 text-xs whitespace-nowrap p-4">
                            <div className="flex gap-2">
                              <button onClick={() => handleEdit(lesson)} className="bg-blue-500 text-white px-2 py-1 rounded text-xs hover:bg-blue-600"><i className="fas fa-edit mr-1"></i>S·ª≠a</button>
                              <button onClick={() => handleStatusChange(lesson.id, lesson.status)} className={`px-2 py-1 rounded text-xs text-white ${lesson.status === 'DRAFT' ? 'bg-green-500 hover:bg-green-600' : 'bg-gray-500 hover:bg-gray-600'}`}><i className={`fas ${lesson.status === 'DRAFT' ? 'fa-eye' : 'fa-eye-slash'} mr-1`}></i>{lesson.status === 'DRAFT' ? 'Xu·∫•t b·∫£n' : '·∫®n'}</button>
                              <button onClick={() => handleDelete(lesson.id, lesson.title)} className="bg-red-500 text-white px-2 py-1 rounded text-xs hover:bg-red-600"><i className="fas fa-trash mr-1"></i>X√≥a</button>
                            </div>
                          </td>
                        </tr>
                      ))
                    )}
                  </tbody>
                </table>
              </div>
            </>
          ) : (
            // --- QUESTIONS MANAGEMENT CONTENT ---
            <div className="px-6 py-6">
              <div className="space-y-6">
                <div className="flex justify-between items-center">
                  <h3 className="text-lg font-semibold text-blueGray-700">
                    üéØ Qu·∫£n l√Ω c√¢u h·ªèi
                  </h3>
                  <p className="text-sm text-blueGray-500">
                    Ch·ªçn b√†i h·ªçc ƒë·ªÉ qu·∫£n l√Ω c√¢u h·ªèi ki·ªÉm tra
                  </p>
                </div>
                
                {/* Lesson Selector */}
                <div className="bg-blueGray-50 p-6 rounded-lg border border-blueGray-200">
                  <label className="block text-blueGray-600 text-sm font-bold mb-3">
                    üìö Ch·ªçn b√†i h·ªçc ƒë·ªÉ qu·∫£n l√Ω c√¢u h·ªèi:
                  </label>
                  <select
                    value={selectedLessonForQuestions || ''}
                    onChange={(e) => handleLessonSelectForQuestions(e.target.value)}
                    className="w-full border border-blueGray-300 px-4 py-3 text-blueGray-600 bg-white rounded text-sm shadow focus:outline-none focus:ring"
                  >
                    <option value="">-- Ch·ªçn b√†i h·ªçc --</option>
                    {lessons.map(lesson => (
                      <option key={lesson.id} value={lesson.id}>
                        {lesson.title} - {lesson.level} ({activeTab === 'reading' ? 'B√†i ƒë·ªçc' : 'B√†i nghe'})
                      </option>
                    ))}
                  </select>
                  
                  {lessons.length === 0 && (
                    <p className="text-sm text-blueGray-500 mt-2">
                      üí° Vui l√≤ng chuy·ªÉn sang tab "Qu·∫£n l√Ω b√†i h·ªçc" ƒë·ªÉ t·∫£i danh s√°ch b√†i h·ªçc tr∆∞·ªõc
                    </p>
                  )}
                </div>

                {/* Question Management Component */}
                {selectedLessonForQuestions && (
                  <div className="bg-white p-6 rounded-lg border border-blueGray-200">
                    <QuestionManagement
                      lessonId={selectedLessonForQuestions}
                      lessonType={activeTab === 'reading' ? 'READING' : 'LISTENING'}
                      onQuestionsChange={handleQuestionsChange}
                    />
                  </div>
                )}

                {!selectedLessonForQuestions && lessons.length > 0 && (
                  <div className="text-center py-8 text-blueGray-500">
                    <i className="fas fa-question-circle text-4xl mb-4 text-blueGray-300"></i>
                    <p>Ch·ªçn m·ªôt b√†i h·ªçc t·ª´ danh s√°ch tr√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu qu·∫£n l√Ω c√¢u h·ªèi</p>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Edit Modal */}
      {editModal.isOpen && (
        <EditLessonModal
          lesson={editModal.lesson}
          onClose={() => setEditModal({ isOpen: false, lesson: null })}
          onSuccess={handleEditComplete}
        />
      )}
    </div>
  );
}
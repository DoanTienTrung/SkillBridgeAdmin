import httpClient from './httpClient';
import { API_ENDPOINTS } from './config';

class LessonService {
  // ================= ADMIN LESSON MANAGEMENT =================
  
  /**
   * T·∫°o b√†i h·ªçc listening m·ªõi
   */
  async createListeningLesson(lessonData) {
    try {
      console.log('üì§ Creating listening lesson: - lessonService.js:12', lessonData);
      const response = await httpClient.post(API_ENDPOINTS.LISTENING_LESSONS, lessonData);
      console.log('‚úÖ Listening lesson created successfully: - lessonService.js:14', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to create listening lesson: - lessonService.js:17', error);
      throw error;
    }
  }

  /**
   * T·∫°o b√†i h·ªçc reading m·ªõi
   */
  async createReadingLesson(lessonData) {
    try {
      console.log('üì§ Creating reading lesson: - lessonService.js:27', lessonData);
      const response = await httpClient.post(API_ENDPOINTS.READING_LESSONS, lessonData);
      console.log('‚úÖ Reading lesson created successfully: - lessonService.js:29', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to create reading lesson: - lessonService.js:32', error);
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch b√†i h·ªçc cho admin
   * @param {string} type - 'reading' ho·∫∑c 'listening'
   */
  async getLessonsAdmin(type) {
    try {
      const endpoint = `/${type}-lessons/admin`;
      console.log("üì§ Fetching lessons for admin from: - lessonService.js:44", endpoint);
      const response = await httpClient.get(endpoint);
      console.log('‚úÖ Admin lessons fetched successfully: - lessonService.js:46', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to fetch admin lessons: - lessonService.js:49', error);
      throw error;
    }
  }

  /**
   * L·∫•y th√¥ng tin b√†i h·ªçc theo ID
   * @param {number} id - ID c·ªßa b√†i h·ªçc
   * @param {string} type - 'reading' ho·∫∑c 'listening'
   */
  async getLessonById(id, type = 'listening') {
    try {
      let endpoint;
      if (type === 'reading') {
        endpoint = API_ENDPOINTS.READING_LESSON_BY_ID(id);
      } else {
        endpoint = API_ENDPOINTS.LISTENING_LESSON_BY_ID(id);
      }
      
      console.log(`üì§ Fetching ${type} lesson by ID: - lessonService.js:68`, id);
      const response = await httpClient.get(endpoint);
      console.log('‚úÖ Lesson fetched successfully: - lessonService.js:70', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to get lesson: - lessonService.js:73', error);
      throw error;
    }
  }

  /**
   * C·∫≠p nh·∫≠t b√†i h·ªçc
   * @param {number} id - ID c·ªßa b√†i h·ªçc
   * @param {Object} lessonData - D·ªØ li·ªáu c·∫≠p nh·∫≠t
   * @param {string} type - 'reading' ho·∫∑c 'listening'
   */
  async updateLesson(id, lessonData, type = 'listening') {
    try {
      let endpoint;
      if (type === 'reading') {
        endpoint = API_ENDPOINTS.READING_LESSON_BY_ID(id);
      } else {
        endpoint = API_ENDPOINTS.LISTENING_LESSON_BY_ID(id);
      }

      console.log(`üì§ Updating ${type} lesson: - lessonService.js:93`, id, lessonData);
      const response = await httpClient.put(endpoint, lessonData);
      console.log('‚úÖ Lesson updated successfully: - lessonService.js:95', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to update lesson: - lessonService.js:98', error);
      throw error;
    }
  }

  /**
   * X√≥a b√†i h·ªçc
   * @param {number} id - ID c·ªßa b√†i h·ªçc
   * @param {string} activeTab - 'reading' ho·∫∑c 'listening'
   */
  async deleteLesson(id, activeTab) {
    try {
      let endpoint;
      if (activeTab === 'reading') {
        endpoint = API_ENDPOINTS.READING_LESSON_BY_ID(id);
      } else {
        endpoint = API_ENDPOINTS.LISTENING_LESSON_BY_ID(id);
      }

      console.log(`üì§ Deleting ${activeTab} lesson: - lessonService.js:117`, id);
      const response = await httpClient.delete(endpoint);
      console.log(`‚úÖ ${activeTab} lesson deleted successfully: - lessonService.js:119`, response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to delete lesson: - lessonService.js:122', error);
      throw error;
    }
  }

  /**
   * C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i h·ªçc
   * @param {number} id - ID c·ªßa b√†i h·ªçc
   * @param {string} status - DRAFT ho·∫∑c PUBLISHED
   * @param {string} type - 'reading' ho·∫∑c 'listening'
   */
  async updateLessonStatus(id, status, type = 'listening') {
    try {
      let endpoint;
      if (type === 'reading') {
        endpoint = `${API_ENDPOINTS.READING_LESSON_BY_ID(id)}/status?status=${status}`;
      } else {
        endpoint = `${API_ENDPOINTS.LISTENING_LESSON_BY_ID(id)}/status?status=${status}`;
      }

      console.log(`üì§ Updating ${type} lesson status: - lessonService.js:142`, id, status);
      const response = await httpClient.put(endpoint);
      console.log('‚úÖ Lesson status updated successfully: - lessonService.js:144', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to update lesson status: - lessonService.js:147', error);
      throw error;
    }
  }

  // ================= CATEGORIES =================

  /**
   * L·∫•y danh s√°ch categories
   */
  async getCategories() {
    try {
      console.log('üì§ Fetching categories... - lessonService.js:159');
      const response = await httpClient.get(API_ENDPOINTS.CATEGORIES);
      console.log('‚úÖ Categories fetched successfully: - lessonService.js:161', response);

      // Handle different response formats from backend
      if (response?.data && Array.isArray(response.data)) {
        return response.data;
      } else if (response?.success && Array.isArray(response.categories)) {
        return response.categories;
      } else if (Array.isArray(response)) {
        return response;
      } else {
        console.warn('‚ö†Ô∏è Unexpected categories response format: - lessonService.js:171', response);
        return [];
      }
    } catch (error) {
      console.error('‚ùå Failed to load categories: - lessonService.js:175', error);
      throw error;
    }
  }

  // ================= QUESTIONS MANAGEMENT =================

  /**
   * T·∫°o nhi·ªÅu c√¢u h·ªèi cho b√†i h·ªçc
   * @param {number} lessonId - ID c·ªßa b√†i h·ªçc
   * @param {Array} questions - M·∫£ng c√¢u h·ªèi
   * @param {string} lessonType - 'LISTENING' ho·∫∑c 'READING'
   */
  async createQuestionsForLesson(lessonId, questions, lessonType) {
    try {
      console.log(`üìù Creating ${questions.length} questions for lesson ${lessonId} - lessonService.js:190`);
      
      const questionPromises = questions.map(async (question) => {
        const questionCreateDto = {
          questionText: question.question,
          questionType: 'MULTIPLE_CHOICE',
          optionA: question.options[0],
          optionB: question.options[1], 
          optionC: question.options[2],
          optionD: question.options[3],
          correctAnswer: String.fromCharCode(65 + question.correctAnswer), // 0->A, 1->B, etc
          explanation: question.explanation || '',
          points: 1,
          lessonId: lessonId,
          lessonType: lessonType
        };
        
        return httpClient.post(API_ENDPOINTS.QUESTIONS, questionCreateDto);
      });
      
      const results = await Promise.all(questionPromises);
      console.log('‚úÖ All questions created successfully: - lessonService.js:211', results);
      return results;
    } catch (error) {
      console.error('‚ùå Failed to create questions: - lessonService.js:214', error);
      throw error;
    }
  }

  /**
   * Th√™m c√¢u h·ªèi v√†o b√†i h·ªçc ƒë√£ t·ªìn t·∫°i
   * @param {number} lessonId - ID c·ªßa b√†i h·ªçc
   * @param {Array} questions - M·∫£ng c√¢u h·ªèi
   * @param {string} lessonType - 'LISTENING' ho·∫∑c 'READING'
   */
  async addQuestionsToExistingLesson(lessonId, questions, lessonType) {
    try {
      console.log(`üìù Adding questions to existing lesson ${lessonId} - lessonService.js:227`);
      
      // Ki·ªÉm tra lesson t·ªìn t·∫°i
      const lesson = await this.getLessonById(lessonId);
      if (!lesson) {
        throw new Error('Lesson not found');
      }
      
      // T·∫°o c√¢u h·ªèi
      return await this.createQuestionsForLesson(lessonId, questions, lessonType);
    } catch (error) {
      console.error('‚ùå Failed to add questions to lesson: - lessonService.js:238', error);
      throw error;
    }
  }

  // ================= PREVIEW & PUBLISH =================

  /**
   * L·∫•y d·ªØ li·ªáu preview b√†i h·ªçc
   * @param {number} lessonId - ID c·ªßa b√†i h·ªçc
   * @param {string} type - 'reading' ho·∫∑c 'listening'
   */
  async getPreviewData(lessonId, type = 'listening') {
    try {
      let endpoint;
      if (type === 'reading') {
        endpoint = `${API_ENDPOINTS.READING_LESSON_BY_ID(lessonId)}/preview`;
      } else {
        endpoint = `${API_ENDPOINTS.LISTENING_LESSON_BY_ID(lessonId)}/preview`;
      }

      console.log(`üì§ Loading ${type} lesson preview: - lessonService.js:259`, lessonId);
      const response = await httpClient.get(endpoint);
      console.log('‚úÖ Preview data loaded successfully: - lessonService.js:261', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to load preview: - lessonService.js:264', error);
      throw error;
    }
  }

  /**
   * Xu·∫•t b·∫£n b√†i h·ªçc
   * @param {number} lessonId - ID c·ªßa b√†i h·ªçc
   * @param {string} type - 'reading' ho·∫∑c 'listening'
   */
  async publishLesson(lessonId, type = 'listening') {
    try {
      let endpoint;
      if (type === 'reading') {
        endpoint = `${API_ENDPOINTS.READING_LESSON_BY_ID(lessonId)}/publish`;
      } else {
        endpoint = `${API_ENDPOINTS.LISTENING_LESSON_BY_ID(lessonId)}/publish`;
      }

      console.log(`üì§ Publishing ${type} lesson: - lessonService.js:283`, lessonId);
      const response = await httpClient.put(endpoint);
      console.log('‚úÖ Lesson published successfully: - lessonService.js:285', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to publish lesson: - lessonService.js:288', error);
      throw error;
    }
  }

  // ================= STUDENT METHODS =================

  /**
   * L·∫•y th·ªëng k√™ h·ªçc vi√™n
   */
  async getStudentStats() {
    try {
      console.log('üì§ Fetching student stats... - lessonService.js:300');
      const response = await httpClient.get(API_ENDPOINTS.STUDENT_STATS);
      console.log('‚úÖ Student stats fetched successfully: - lessonService.js:302', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to fetch student stats: - lessonService.js:305', error);
      throw error;
    }
  }

  /**
   * L·∫•y b√†i h·ªçc g·∫ßn ƒë√¢y c·ªßa h·ªçc vi√™n
   * @param {number} limit - S·ªë l∆∞·ª£ng b√†i h·ªçc
   */
  async getRecentLessons(limit = 5) {
    try {
      console.log(`üì§ Fetching ${limit} recent lessons... - lessonService.js:316`);
      const response = await httpClient.get(`${API_ENDPOINTS.STUDENT_RECENT_LESSONS}?limit=${limit}`);
      console.log('‚úÖ Recent lessons fetched successfully: - lessonService.js:318', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to fetch recent lessons: - lessonService.js:321', error);
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch b√†i h·ªçc ƒë√£ xu·∫•t b·∫£n cho h·ªçc vi√™n
   * @param {Object} filters - B·ªô l·ªçc
   */
  async getPublishedLessons(filters = {}) {
    try {
      const params = new URLSearchParams();
      if (filters.type && filters.type !== 'all') params.append('type', filters.type);
      if (filters.level && filters.level !== 'all') params.append('level', filters.level);
      if (filters.category && filters.category !== 'all') params.append('categoryId', filters.category);
      if (filters.search) params.append('search', filters.search);
      
      const endpoint = `${API_ENDPOINTS.STUDENT_LESSONS}?${params}`;
      console.log('üì§ Fetching published lessons with filters: - lessonService.js:339', filters);
      const response = await httpClient.get(endpoint);
      console.log('‚úÖ Published lessons fetched successfully: - lessonService.js:341', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to fetch published lessons: - lessonService.js:344', error);
      throw error;
    }
  }

  /**
   * L·∫•y b√†i h·ªçc theo ID cho h·ªçc vi√™n
   * @param {number} id - ID c·ªßa b√†i h·ªçc
   * @param {string} type - 'reading' ho·∫∑c 'listening'
   */
  async getStudentLessonById(id, type) {
    try {
      console.log(`üì§ Fetching ${type} lesson for student: - lessonService.js:356`, id);
      const response = await httpClient.get(API_ENDPOINTS.STUDENT_LESSON_BY_TYPE_ID(type, id));
      console.log('‚úÖ Student lesson fetched successfully: - lessonService.js:358', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to fetch student lesson: - lessonService.js:361', error);
      throw error;
    }
  }

  /**
   * L·∫•y c√¢u h·ªèi c·ªßa b√†i h·ªçc
   * @param {number} lessonId - ID c·ªßa b√†i h·ªçc
   * @param {string} lessonType - 'LISTENING' ho·∫∑c 'READING'
   */
  async getLessonQuestions(lessonId, lessonType) {
    try {
      console.log(`üì§ Fetching questions for lesson ${lessonId}, type: ${lessonType} - lessonService.js:373`);
      const response = await httpClient.get(`${API_ENDPOINTS.QUESTIONS}/lesson/${lessonId}?lessonType=${lessonType}`);
      console.log('‚úÖ Lesson questions fetched successfully: - lessonService.js:375', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to fetch lesson questions: - lessonService.js:378', error);
      throw error;
    }
  }

  /**
   * N·ªôp b√†i l√†m c·ªßa h·ªçc vi√™n
   * @param {Object} submissionData - D·ªØ li·ªáu b√†i l√†m
   */
  async submitAnswers(submissionData) {
    try {
      console.log('üì§ Submitting student answers: - lessonService.js:389', submissionData);
      const response = await httpClient.post(API_ENDPOINTS.STUDENT_SUBMIT_ANSWERS, submissionData);
      console.log('‚úÖ Answers submitted successfully: - lessonService.js:391', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to submit answers: - lessonService.js:394', error);
      throw error;
    }
  }

  /**
   * L·∫•y ti·∫øn ƒë·ªô h·ªçc vi√™n
   */
  async getStudentProgress() {
    try {
      console.log('üì§ Fetching student progress... - lessonService.js:404');
      const response = await httpClient.get(API_ENDPOINTS.STUDENT_PROGRESS);
      console.log('‚úÖ Student progress fetched successfully: - lessonService.js:406', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to fetch student progress: - lessonService.js:409', error);
      throw error;
    }
  }

  // ================= FILE UPLOAD =================

  /**
   * Upload file text cho b√†i ƒë·ªçc
   * @param {File} file - File text
   */
  async uploadTextFile(file) {
    try {
      const formData = new FormData();
      formData.append('file', file);
      
      console.log('üì§ Uploading text file: - lessonService.js:425', file.name);
      const response = await httpClient.postMultipart(API_ENDPOINTS.UPLOAD_TEXT_FILE, formData);
      console.log('‚úÖ Text file uploaded successfully: - lessonService.js:427', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to upload text file: - lessonService.js:430', error);
      throw error;
    }
  }


/**
   * L·∫•y danh s√°ch b√†i h·ªçc ƒë√£ xu·∫•t b·∫£n cho h·ªçc vi√™n
   * @param {Object} filters - B·ªô l·ªçc
   */
  async getPublishedLessons(filters = {}) {
    try {
      const params = new URLSearchParams();
      
      // Th√™m filters v√†o query params
      if (filters.type && filters.type !== 'all') {
        params.append('type', filters.type.toUpperCase());
      }
      if (filters.level && filters.level !== 'all') {
        params.append('level', filters.level);
      }
      if (filters.category && filters.category !== 'all') {
        params.append('categoryId', filters.category);
      }
      if (filters.search && filters.search.trim()) {
        params.append('search', filters.search.trim());
      }
      
      const endpoint = `${API_ENDPOINTS.STUDENT_LESSONS}${params.toString() ? '?' + params.toString() : ''}`;
      
      console.log('üì§ Fetching published lessons from: - lessonService.js:460', endpoint);
      console.log('üéõÔ∏è Filters applied: - lessonService.js:461', filters);
      
      const response = await httpClient.get(endpoint);
      
      console.log('‚úÖ Published lessons API response: - lessonService.js:465', response);
      
      return response;
    } catch (error) {
      console.error('‚ùå Failed to fetch published lessons: - lessonService.js:469', error);
      console.error('Error details: - lessonService.js:470', {
        message: error.message,
        status: error.status,
        endpoint: API_ENDPOINTS.STUDENT_LESSONS
      });
      throw error;
    }
  }
}

// T·∫°o singleton instance
const lessonService = new LessonService();
export default lessonService;
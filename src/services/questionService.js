import httpClient from './httpClient';
import { API_ENDPOINTS } from './config';

class QuestionService {
  /**
   * L·∫•y danh s√°ch c√¢u h·ªèi theo b√†i h·ªçc
   * @param {number} lessonId - ID c·ªßa b√†i h·ªçc
   * @param {string} lessonType - Lo·∫°i b√†i h·ªçc: 'LISTENING' ho·∫∑c 'READING'
   */
  async getQuestionsByLesson(lessonId, lessonType) {
    try {
      console.log(`üì§ Fetching questions for lesson ${lessonId}, type: ${lessonType}`);
      
      // Chuy·ªÉn ƒë·ªïi lessonType t·ª´ frontend format sang backend format
      const backendLessonType = lessonType === 'READING' ? 'READING' : 'LISTENING';
      
      const response = await httpClient.get(
        `${API_ENDPOINTS.QUESTIONS}/lesson/${lessonId}?lessonType=${backendLessonType}`
      );
      
      console.log('‚úÖ Questions fetched successfully:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to fetch questions:', error);
      throw error;
    }
  }

  /**
   * T·∫°o c√¢u h·ªèi m·ªõi
   * @param {Object} questionData - D·ªØ li·ªáu c√¢u h·ªèi
   */
  async createQuestion(questionData) {
    try {
      console.log('üì§ Creating question:', questionData);
      
      // Chu·∫©n h√≥a d·ªØ li·ªáu theo format backend mong ƒë·ª£i
      const questionCreateDto = {
        questionText: questionData.questionText,
        questionType: questionData.questionType || 'MULTIPLE_CHOICE',
        optionA: questionData.optionA,
        optionB: questionData.optionB,
        optionC: questionData.optionC,
        optionD: questionData.optionD,
        correctAnswer: questionData.correctAnswer,
        explanation: questionData.explanation,
        points: questionData.points || 1,
        lessonId: questionData.lessonId,
        lessonType: questionData.lessonType
      };
      
      const response = await httpClient.post(API_ENDPOINTS.QUESTIONS, questionCreateDto);
      console.log('‚úÖ Question created successfully:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to create question:', error);
      throw error;
    }
  }

  /**
   * C·∫≠p nh·∫≠t c√¢u h·ªèi
   * @param {number} id - ID c·ªßa c√¢u h·ªèi
   * @param {Object} questionData - D·ªØ li·ªáu c√¢u h·ªèi c·∫ßn c·∫≠p nh·∫≠t
   */
  async updateQuestion(id, questionData) {
    try {
      console.log(`üì§ Updating question ${id}:`, questionData);
      
      const questionUpdateDto = {
        questionText: questionData.questionText,
        questionType: questionData.questionType,
        optionA: questionData.optionA,
        optionB: questionData.optionB,
        optionC: questionData.optionC,
        optionD: questionData.optionD,
        correctAnswer: questionData.correctAnswer,
        explanation: questionData.explanation,
        points: questionData.points
      };
      
      const response = await httpClient.put(`${API_ENDPOINTS.QUESTIONS}/${id}`, questionUpdateDto);
      console.log('‚úÖ Question updated successfully:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to update question:', error);
      throw error;
    }
  }

  /**
   * X√≥a c√¢u h·ªèi
   * @param {number} id - ID c·ªßa c√¢u h·ªèi c·∫ßn x√≥a
   */
  async deleteQuestion(id) {
    try {
      console.log(`üì§ Deleting question ${id}`);
      const response = await httpClient.delete(`${API_ENDPOINTS.QUESTIONS}/${id}`);
      console.log('‚úÖ Question deleted successfully:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to delete question:', error);
      throw error;
    }
  }

  /**
   * L·∫•y c√¢u h·ªèi theo ID
   * @param {number} id - ID c·ªßa c√¢u h·ªèi
   */
  async getQuestionById(id) {
    try {
      console.log(`üì§ Fetching question ${id}`);
      const response = await httpClient.get(`${API_ENDPOINTS.QUESTIONS}/${id}`);
      console.log('‚úÖ Question fetched successfully:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to fetch question:', error);
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch t·∫•t c·∫£ c√¢u h·ªèi (cho admin)
   */
  async getAllQuestions() {
    try {
      console.log('üì§ Fetching all questions for admin...');
      const response = await httpClient.get(API_ENDPOINTS.QUESTIONS);
      console.log('‚úÖ All questions fetched successfully:', response);
      return response;
    } catch (error) {
      console.error('‚ùå Failed to fetch all questions:', error);
      throw error;
    }
  }

  /**
   * Validation helper cho d·ªØ li·ªáu c√¢u h·ªèi
   * @param {Object} questionData - D·ªØ li·ªáu c√¢u h·ªèi c·∫ßn validate
   */
  validateQuestionData(questionData) {
    const errors = [];

    if (!questionData.questionText?.trim()) {
      errors.push('N·ªôi dung c√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
    }

    if (!questionData.correctAnswer?.trim()) {
      errors.push('ƒê√°p √°n ƒë√∫ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
    }

    if (questionData.questionType === 'MULTIPLE_CHOICE') {
      const options = [questionData.optionA, questionData.optionB, 
                      questionData.optionC, questionData.optionD];
      const emptyOptions = options.filter(opt => !opt?.trim());
      
      if (emptyOptions.length > 0) {
        errors.push('T·∫•t c·∫£ c√°c l·ª±a ch·ªçn ph·∫£i ƒë∆∞·ª£c ƒëi·ªÅn ƒë·∫ßy ƒë·ªß cho c√¢u h·ªèi tr·∫Øc nghi·ªám');
      }

      const validAnswers = ['A', 'B', 'C', 'D'];
      if (!validAnswers.includes(questionData.correctAnswer?.toUpperCase())) {
        errors.push('ƒê√°p √°n ƒë√∫ng ph·∫£i l√† A, B, C ho·∫∑c D');
      }
    }

    if (questionData.questionType === 'TRUE_FALSE') {
      const validAnswers = ['TRUE', 'FALSE', 'true', 'false'];
      if (!validAnswers.includes(questionData.correctAnswer)) {
        errors.push('ƒê√°p √°n ƒë√∫ng ph·∫£i l√† TRUE ho·∫∑c FALSE');
      }
    }

    if (questionData.points && (questionData.points < 0 || questionData.points > 10)) {
      errors.push('ƒêi·ªÉm s·ªë ph·∫£i t·ª´ 0 ƒë·∫øn 10');
    }

    return errors;
  }

  /**
   * Helper ƒë·ªÉ format d·ªØ li·ªáu c√¢u h·ªèi hi·ªÉn th·ªã
   * @param {Object} question - D·ªØ li·ªáu c√¢u h·ªèi t·ª´ API
   */
  formatQuestionForDisplay(question) {
    return {
      ...question,
      questionTypeName: question.questionType === 'MULTIPLE_CHOICE' ? 'Tr·∫Øc nghi·ªám' : 'ƒê√∫ng/Sai',
      lessonTypeName: question.lessonType === 'LISTENING' ? 'B√†i nghe' : 'B√†i ƒë·ªçc',
      correctAnswerText: this.getCorrectAnswerText(question)
    };
  }

  /**
   * Helper ƒë·ªÉ l·∫•y text c·ªßa ƒë√°p √°n ƒë√∫ng
   * @param {Object} question - D·ªØ li·ªáu c√¢u h·ªèi
   */
  getCorrectAnswerText(question) {
    if (question.questionType === 'MULTIPLE_CHOICE') {
      const answerMap = {
        'A': question.optionA,
        'B': question.optionB,
        'C': question.optionC,
        'D': question.optionD
      };
      return answerMap[question.correctAnswer] || question.correctAnswer;
    }
    return question.correctAnswer === 'TRUE' ? 'ƒê√∫ng' : 'Sai';
  }
}

// T·∫°o singleton instance
const questionService = new QuestionService();
export default questionService;